#!/usr/bin/env bash

set -e

function __get_system_timezone ()
{
	local -r default_value="${1:-UTC}"

	local value="${SYSTEM_TIMEZONE}"

	if ! __is_valid_system_timezone "${value}"
	then
		value="${default_value}"
	fi

	printf -- '%s' "${value}"
}

function __is_valid_system_timezone ()
{
	__is_valid_zone "${@}"
}

function __is_valid_zone ()
{
	local zone="${1}"

	if [[ -n ${zone} ]] \
		&& [[ -f /usr/share/zoneinfo/${zone} ]]
	then
		return 0
	fi

	return 1
}

function main ()
{
	local -r system_timezone="$(
		__get_system_timezone
	)"
	local -r zone="$(
		system-timezone -qq
	)"

	if ! ps axo command \
		| grep -qE '^/usr/bin/python /usr/bin/supervisord'
	then
		>&2 printf -- \
			'%s\n' \
			"supervisord not running."
		exit 1
	fi

	if [[ ${system_timezone} != "${zone}" ]]
	then
		>&2 printf -- \
			'%s\n' \
			"system-timezone zone mismatch."
		exit 1
	fi

	if [[ ${ENABLE_VARNISHD_WRAPPER} == false ]] \
		&& [[ ${ENABLE_VARNISHNCSA_WRAPPER} == false ]]
	then
		exit 0
	fi

	if [[ ${ENABLE_VARNISHD_WRAPPER} == true ]] \
		&& ! ps axo command \
		| grep -qE '^/usr/sbin/varnishd '
	then
		>&2 printf -- \
			'%s\n' \
			"varnishd not running."
		exit 1
	fi

	if [[ ${ENABLE_VARNISHD_WRAPPER} == true ]] \
		&& ! varnishadm vcl.show -v boot \
		&> /dev/null
	then
		>&2 printf -- \
			'%s\n' \
			"varnishd not booted."
		exit 1
	fi

	if [[ ${ENABLE_VARNISHNCSA_WRAPPER} == true ]] \
		&& ! ps axo command \
		| grep -qE '^/usr/bin/varnishncsa '
	then
		>&2 printf -- \
			'%s\n' \
			"varnishncsa not running."
		exit 1
	fi
}

main "${@}"
