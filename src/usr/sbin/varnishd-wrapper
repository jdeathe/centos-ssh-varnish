#!/usr/bin/env bash

set -e

function __cleanup ()
{
	if [[ -e ${lock_file} ]]
	then
		rm -f "${lock_file}"
	fi
}

function __create_lock ()
{
	if [[ -n ${lock_file} ]]
	then
		touch "${lock_file}"
	fi
}

function __create_state ()
{
	if [[ -n ${state_file} ]]
	then
		touch "${state_file}"
	fi
}

function __get_options ()
{
	local -r max_threads="${5:-"$(
		__get_varnish_max_threads
	)"}"
	local -r min_threads="${4:-"$(
		__get_varnish_min_threads
	)"}"
	local -r options="${7:-"$(
		__get_varnish_options
	)"}"
	local -r storage="${2:-"$(
		__get_varnish_storage
	)"}"
	local -r thread_timeout="${6:-"$(
		__get_varnish_thread_timeout
	)"}"
	local -r ttl="${3:-"$(
		__get_varnish_ttl
	)"}"
	local -r vcl_path="${1:-"$(
		__get_varnish_vcl_conf_path
	)"}"

	printf -- \
		'-j %s -F -P %s -S %s -s %s -a %s -f %s -T %s -t %u -p %s -p %s -p %s%s%s' \
		"unix,user=varnish,ccgroup=varnish" \
		"/var/run/varnish.pid" \
		"/etc/varnish/secret" \
		"${storage}" \
		"0.0.0.0:80 -a 0.0.0.0:8443,PROXY" \
		"${vcl_path}" \
		"127.0.0.1:6082" \
		"${ttl}" \
		"thread_pool_min=${min_threads}" \
		"thread_pool_max=${max_threads}" \
		"thread_pool_timeout=${thread_timeout}" \
		"${options:+" "}" \
		"${options}"
}

function __get_proxy ()
{
	printf -- \
		'%s -n %s' \
		"${nice}" \
		"${niceness}"
}

function __get_timer_total ()
{
	local -r timer_end="$(
		date -u +%s.%N
	)"
	local -r timer_start="${1}"

	if [[ -z ${timer_start} ]] \
		|| [[ ${timer_start//.} -gt ${timer_end//.} ]]
	then
		>&2 printf -- \
			'ERROR: invalid timer start: %s\n' \
			"${timer_start}"
		printf -- \
			'0.000000'
	else
		awk \
			-v timer_end="${timer_end}" \
			-v timer_start="${timer_start}" \
			'BEGIN { print \
				timer_end - timer_start;
			}'
	fi
}

function __get_varnish_max_threads ()
{
	local -r default_value="${1:-1000}"

	local value="${VARNISH_MAX_THREADS}"

	if ! __is_valid_varnish_max_threads "${value}"
	then
		value="${default_value}"
	fi

	printf -- '%s' "${value}"
}

function __get_varnish_min_threads ()
{
	local -r default_value="${1:-50}"

	local value="${VARNISH_MIN_THREADS}"

	if ! __is_valid_varnish_min_threads "${value}"
	then
		value="${default_value}"
	fi

	printf -- '%s' "${value}"
}

function __get_varnish_options ()
{
	printf -- '%s' "${VARNISH_OPTIONS}"
}

function __get_varnish_storage ()
{
	local -r default_value="${1:-file,/var/lib/varnish/varnish_storage.bin,1G}"

	local value="${VARNISH_STORAGE}"

	if ! __is_valid_varnish_storage "${value}"
	then
		value="${default_value}"
	fi

	printf -- '%s' "${value}"
}

function __get_varnish_thread_timeout ()
{
	local -r default_value="${1:-120}"

	local value="${VARNISH_THREAD_TIMEOUT}"

	if ! __is_valid_varnish_thread_timeout "${value}"
	then
		value="${default_value}"
	fi

	printf -- '%s' "${value}"
}

function __get_varnish_ttl ()
{
	local -r default_value="${1:-120}"

	local value="${VARNISH_TTL}"

	if ! __is_valid_varnish_ttl "${value}"
	then
		value="${default_value}"
	fi

	printf -- '%s' "${value}"
}

function __get_varnish_vcl_conf ()
{
	local -r default_value="${1:-/etc/varnish/docker-default.vcl}"

	local value="${VARNISH_VCL_CONF}"

	if [[ -z ${value} ]]
	then
		value="${default_value}"
	fi

	printf -- '%s' "${value}"
}

function __get_varnish_vcl_conf_path ()
{
	local -r default_value="${1:-/etc/varnish/docker-default.vcl}"

	local value="$(
		__get_varnish_vcl_conf
	)"

	if [[ ! -s ${value} ]]
	then
		value="${default_value}"
	fi

	printf -- '%s' "${value}"
}

function __get_varnishd_version ()
{
	local semantic_version

	if ! command -v varnishd &> /dev/null
	then
		>&2 printf -- \
			'ERROR: varnishd binary not installed\n'
		return 1
	fi

	semantic_version="$(
		2>&1 varnishd -V \
		| grep -E -o 'varnish-\/[0-9]+\.[0-9]+\.[0-9]+' \
		| awk -F'-' '{ print $NF; }'
	)"

	printf -- '%s' "${semantic_version}"
}

function __is_valid_positive_integer ()
{
	local -r positive_integer='^[0-9]+$'
	local -r value="${1}"

	if [[ ${value} =~ ${positive_integer} ]]
	then
		return 0
	fi

	return 1
}

function __is_valid_varnish_max_threads ()
{
	local -r value="${1}"

	if __is_valid_positive_integer "${value}" \
		&& [[ ${value} -ge 100 ]]
	then
		return 0
	fi

	return 1
}

function __is_valid_varnish_min_threads ()
{
	local -r value="${1}"

	if __is_valid_positive_integer "${value}" \
		&& [[ ${value} -ge 10 ]] \
		&& [[ ${value} -le 5000 ]]
	then
		return 0
	fi

	return 1
}

function __is_valid_varnish_storage ()
{
	local -r storage_pattern='^(malloc,?|file,\/)'
	local -r value="${1}"

	if [[ ${value} =~ ${storage_pattern} ]]
	then
		return 0
	fi

	return 1
}

function __is_valid_varnish_thread_timeout ()
{
	local -r value="${1}"

	if __is_valid_positive_integer "${value}" \
		&& [[ ${value} -ge 10 ]]
	then
		return 0
	fi

	return 1
}

function __is_valid_varnish_ttl ()
{
	__is_valid_positive_integer "${@}"
}

function __populate_psk_secret_file ()
{
	local -r file_path="${1:-/etc/varnish/secret}"
	local -r user="${2:-varnish}"
	local -r group="${3:-varnish}"

	local verbose="${verbose:-false}"

	if [[ ! -s ${file_path} ]]
	then
		if [[ ${verbose} == true ]]
		then
			printf -- \
				'INFO: %s populating PSK secret file\n' \
				"${0##*/}"
		fi

		dd \
			if=/dev/urandom \
			of="${file_path}" \
			count=1 \
			&> /dev/null

		chown \
			${user}:${group} \
			"${file_path}"

		chmod \
			640 \
			"${file_path}"
	fi
}

function __set_varnish_vcl_conf ()
{
	local -r pattern_base64='^[A-Za-z0-9/+=]*$'
	local -r pattern_plain_text='.*vcl 4.0;.*'
	local -r vcl_path="/etc/varnish/docker-default.vcl"

	local value="${1:-"$(
		__get_varnish_vcl_conf
	)"}"

	if [[ -n ${value} ]] \
		&& [[ ! -s ${value} ]]
	then
		# Decode base64 encoded values
		if [[ ${value} =~ ${pattern_base64} ]]
		then
			value="$(
				base64 -d -i <<< "${value}"
			)"
		fi

		if [[ ! ${value} =~ ${pattern_plain_text} ]]
		then
			>&2 printf -- \
				'ERROR: %s invalid VCL\n' \
				"${0##*/}"
			exit 1
		fi

		printf \
			-- '%s' \
			"${value}" \
			> "${vcl_path}"
	fi
}

function __test_varnish_vcl_conf ()
{
	local -r vcl_path="${1:-"$(
		__get_varnish_vcl_conf_path
	)"}"

	local bin="${bin:-/usr/sbin/varnishd}"

	if ! ${bin} -C -f ${vcl_path} &> /dev/null
	then
		# Display the error details
		set +e
		${bin} \
			-C \
			-f ${vcl_path}
		set -e

		>&2 printf -- \
			'ERROR: %s invalid VCL\n' \
			"${0##*/}"
		exit 1
	fi
}

function main ()
{
	local -r bin="/usr/sbin/varnishd"
	local -r lock_file="/var/lock/subsys/varnishd-wrapper"
	local -r nice="/bin/nice"
	local -r niceness="10"
	local -r state_file="/var/lib/misc/varnishd-wrapper"
	local -r timer_start="$(
		date -u +%s.%N
	)"

	local options
	local proxy
	local timer_total
	local varnish_max_threads
	local varnish_min_threads
	local varnish_options
	local varnish_storage
	local varnish_thread_timeout
	local varnish_ttl
	local varnish_vcl_conf
	local verbose="false"

	while [[ "${#}" -gt 0 ]]
	do
		case "${1}" in
			-v|--verbose)
				verbose="true"
				shift 1
				;;
		esac
	done

	if [[ -f ${lock_file} ]]
	then
		>&2 printf -- \
			'ERROR: %s lock detected - aborting\n' \
			"${0##*/}"
		exit 1
	fi

	trap "__cleanup" \
		INT TERM EXIT
	__create_lock

	if [[ ${verbose} == true ]] \
		&& [[ ! -f ${state_file} ]]
	then
		varnish_max_threads="$(
			__get_varnish_max_threads
		)"
		varnish_min_threads="$(
			__get_varnish_min_threads
		)"
		varnish_options="$(
			__get_varnish_options
		)"
		varnish_storage="$(
			__get_varnish_storage
		)"
		varnish_thread_timeout="$(
			__get_varnish_thread_timeout
		)"
		varnish_ttl="$(
			__get_varnish_ttl
		)"
		varnish_vcl_conf="$(
			__get_varnish_vcl_conf_path
		)"

		__populate_psk_secret_file
		__set_varnish_vcl_conf
		__test_varnish_vcl_conf \
			"${varnish_vcl_conf}"

		options="$(
			__get_options \
				"${varnish_vcl_conf}" \
				"${varnish_storage}" \
				"${varnish_ttl}" \
				"${varnish_min_threads}" \
				"${varnish_max_threads}" \
				"${varnish_thread_timeout}" \
				"${varnish_options}"
		)"
		proxy="$(
			__get_proxy
		)"

		timer_total="$(
			__get_timer_total \
				"${timer_start}"
		)"

		cat \
			<<-EOT

			================================================================================
			Varnish (varnishd) Details
			--------------------------------------------------------------------------------
			vcl : ${varnish_vcl_conf}
			storage : ${varnish_storage}
			ttl : ${varnish_ttl}
			thread_pool_min : ${varnish_min_threads}
			thread_pool_max : ${varnish_max_threads}
			thread_pool_timeout: ${varnish_thread_timeout}
			varnishd options : ${varnish_options}
			--------------------------------------------------------------------------------
			${timer_total}

		EOT
	else
		options="$(
			__get_options
		)"
		proxy="$(
			__get_proxy
		)"
	fi

	if [[ ${verbose} == true ]]
	then
		printf -- \
			'INFO: %s starting %s\n' \
			"${0##*/}" \
			"${bin##*/}"
	fi

	__create_state
	__cleanup
	trap - \
		INT TERM EXIT

	exec \
		${proxy} \
		${bin} \
		${options}
}

main "${@}"
