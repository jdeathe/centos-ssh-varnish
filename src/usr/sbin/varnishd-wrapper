#!/usr/bin/env bash

set -e

function __cleanup ()
{
	local -r lock_file="${1}"

	rm -f "${lock_file}"
}

function __get_options ()
{
	local -r max_threads="${5:-"$(
		__get_varnish_max_threads
	)"}"
	local -r min_threads="${4:-"$(
		__get_varnish_min_threads
	)"}"
	local -r options="${7:-"$(
		__get_varnish_options
	)"}"
	local -r storage="${2:-"$(
		__get_varnish_options
	)"}"
	local -r thread_timeout="${6:-"$(
		__get_varnish_thread_timeout
	)"}"
	local -r ttl="${3:-"$(
		__get_varnish_ttl
	)"}"
	local -r vcl_path="${1:-"$(
		__get_varnish_vcl_conf_path
	)"}"

	printf -- \
		'-j %s -F -P %s -S %s -s %s -a %s -f %s -T %s -t %u -p %s -p %s -p %s%s%s' \
		"unix,user=varnish,ccgroup=varnish" \
		"/var/run/varnish.pid" \
		"/etc/varnish/secret" \
		"${storage}" \
		"0.0.0.0:80 -a 0.0.0.0:8443,PROXY" \
		"${vcl_path}" \
		"127.0.0.1:6082" \
		"${ttl}" \
		"thread_pool_min=${min_threads}" \
		"thread_pool_max=${max_threads}" \
		"thread_pool_timeout=${thread_timeout}" \
		"${options:+" "}" \
		"${options}"
}

function __get_timer_total ()
{
	local -r timer_end="$(
		date +%s.%N
	)"
	local -r timer_start="${1}"

	if [[ -z ${timer_start} ]] \
		|| [[ ${timer_start//.} -gt ${timer_end//.} ]]
	then
		>&2 printf -- \
			'ERROR: invalid timer start: %s\n' \
			"${timer_start}"
		printf -- \
			'0.000000'
	else
		awk \
			-v timer_end="${timer_end}" \
			-v timer_start="${timer_start}" \
			'BEGIN { print \
				timer_end - timer_start;
			}'
	fi
}

function __get_varnish_max_threads ()
{
	local value="${VARNISH_MAX_THREADS:-1000}"

	printf -- '%s' ${value}
}

function __get_varnish_min_threads ()
{
	local value="${VARNISH_MIN_THREADS:-50}"

	printf -- '%s' ${value}
}

function __get_varnish_options ()
{
	local value="${VARNISH_OPTIONS}"

	printf -- '%s' ${value}
}

function __get_varnish_storage ()
{
	local value="${VARNISH_STORAGE:-file,/var/lib/varnish/varnish_storage.bin,1G}"

	printf -- '%s' ${value}
}

function __get_varnish_thread_timeout ()
{
	local value="${VARNISH_THREAD_TIMEOUT:-120}"

	printf -- '%s' ${value}
}

function __get_varnish_ttl ()
{
	local value="${VARNISH_TTL:-120}"

	printf -- '%s' ${value}
}

function __get_varnish_vcl_conf_path ()
{
	local -r value="${VARNISH_VCL_CONF}"

	if [[ -s ${value} ]]
	then
		printf -- '%s' "${value}"
	else
		printf -- \
			'%s' \
			"/etc/varnish/docker-default.vcl"
	fi
}

function __populate_psk_secret_file ()
{
	local -r file_path="${1:-/etc/varnish/secret}"
	local -r user="${2:-varnish}"
	local -r group="${3:-varnish}"

	local verbose="${verbose:-false}"

	if [[ ! -s ${file_path} ]]
	then
		if [[ ${verbose} == true ]]
		then
			printf -- \
				'INFO: Populating Varnish PSK secret file\n'
		fi

		dd \
			if=/dev/urandom \
			of="${file_path}" \
			count=1 \
			&> /dev/null

		chown \
			${user}:${group} \
			"${file_path}"

		chmod \
			640 \
			"${file_path}"
	fi
}

function __set_varnish_vcl_conf ()
{
	local -r pattern_base64='^[A-Za-z0-9/+=]*$'
	local -r pattern_plain_text='.*vcl 4.0;.*'

	#TODO getter
	local value="${1:-"${VARNISH_VCL_CONF}"}"

	if [[ -n ${value} ]] \
		&& [[ ! -s ${value} ]]
	then
		# Decode base64 encoded values
		if [[ ${value} =~ ${pattern_base64} ]]
		then
			value="$(
				base64 -d -i <<< "${value}"
			)"
		fi

		if [[ ! ${value} =~ ${pattern_plain_text} ]]
		then
			>&2 printf -- \
				'ERROR: Invalid VCL File\n'
			exit 1
		fi

		printf \
			-- '%s' \
			"${value}" \
			> /etc/varnish/docker-default.vcl
	fi
}

function main ()
{
	local -r bin="/usr/sbin/varnishd"
	local -r lock_file="/var/lock/subsys/varnishd-wrapper"
	local -r nice="/bin/nice"
	local -r niceness="10"
	local -r state_file="/var/lib/misc/varnishd-wrapper"
	local -r timer_start="$(
		date +%s.%N
	)"

	local options
	local timer_total
	local varnish_max_threads
	local varnish_min_threads
	local varnish_options
	local varnish_storage
	local varnish_thread_timeout
	local varnish_ttl
	local varnish_vcl_conf
	local verbose="false"

	# Parse options
	while [[ "${#}" -gt 0 ]]
	do
		case "${1}" in
			-v|--verbose)
				verbose="true"
				shift 1
				;;
		esac
	done

	if [[ -e ${lock_file} ]]
	then
		>&2 printf -- \
			'ERROR: %s lock detected - aborting.\n' \
			"${0##*/}"
		exit 1
	fi

	trap \
		"__cleanup \"${lock_file}\"" \
		INT TERM EXIT

	# Create lock
	touch \
		"${lock_file}"

	if [[ ${verbose} == true ]] \
		&& [[ ! -e ${state_file} ]]
	then
		varnish_max_threads="$(
			__get_varnish_max_threads
		)"
		varnish_min_threads="$(
			__get_varnish_min_threads
		)"
		varnish_options="$(
			__get_varnish_options
		)"
		varnish_storage="$(
			__get_varnish_storage
		)"
		varnish_thread_timeout="$(
			__get_varnish_thread_timeout
		)"
		varnish_ttl="$(
			__get_varnish_ttl
		)"
		varnish_vcl_conf="$(
			__get_varnish_vcl_conf_path
		)"

		__populate_psk_secret_file
		__set_varnish_vcl_conf

		options="$(
			__get_options \
				"${varnish_vcl_conf}" \
				"${varnish_storage}" \
				"${varnish_ttl}" \
				"${varnish_min_threads}" \
				"${varnish_max_threads}" \
				"${varnish_thread_timeout}" \
				"${varnish_options}"
		)"

		timer_total="$(
			__get_timer_total \
				"${timer_start}"
		)"

		cat \
			<<-EOT

			================================================================================
			Varnish (varnishd) Details
			--------------------------------------------------------------------------------
			vcl : ${varnish_vcl_conf}
			storage : ${varnish_storage}
			ttl : ${varnish_ttl}
			thread_pool_min : ${varnish_min_threads}
			thread_pool_max : ${varnish_max_threads}
			thread_pool_timeout: ${varnish_thread_timeout}
			varnishd options : ${varnish_options}
			--------------------------------------------------------------------------------
			${timer_total}

		EOT
	else
		options="$(
			__get_options
		)"
	fi

	touch \
		"${state_file}"

	__cleanup \
		"${lock_file}"

	trap - \
		INT TERM EXIT

	if [[ ${verbose} == true ]]
	then
		printf -- \
			'INFO: %s starting %s\n' \
			"${0##*/}" \
			"${bin##*/}"
	fi

	exec ${nice} \
		-n ${niceness} \
		${bin} \
		${options}
}

main "${@}"
