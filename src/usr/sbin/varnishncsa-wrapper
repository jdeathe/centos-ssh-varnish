#!/usr/bin/env bash

set -e

function __cleanup ()
{
	if [[ -e ${lock_file} ]]
	then
		rm -f "${lock_file}"
	fi
}

function __create_lock ()
{
	if [[ -n ${lock_file} ]]
	then
		touch "${lock_file}"
	fi
}

function __create_state ()
{
	if [[ -n ${state_file} ]]
	then
		touch "${state_file}"
	fi
}

function __get_options ()
{
	local -r format="${1:-"$(
		__get_varnish_varnishncsa_format
	)"}"
	local -r options="${2:-"$(
		__get_varnish_varnishncsa_options
	)"}"

	printf -- \
		'-a -c -P %s -F \"%s\"%s%s' \
		"/var/run/varnish/varnishncsa.pid" \
		"${format//\"/\\\"}" \
		"${options:+" "}" \
		"${options}"
}

function __get_proxy ()
{
	printf -- \
		'%s -n %s' \
		"${nice}" \
		"${niceness}"
}

function __get_timer_total ()
{
	local -r timer_end="$(
		date -u +%s.%N
	)"
	local -r timer_start="${1}"

	if [[ -z ${timer_start} ]] \
		|| [[ ${timer_start//.} -gt ${timer_end//.} ]]
	then
		>&2 printf -- \
			'ERROR: %s invalid timer start: %s\n' \
			"${0##*/}" \
			"${timer_start}"
		printf -- \
			'0.000000'
	else
		awk \
			-v timer_end="${timer_end}" \
			-v timer_start="${timer_start}" \
			'BEGIN { print \
				timer_end - timer_start;
			}'
	fi
}

function __get_varnish_varnishncsa_format ()
{
	local -r default_value="${1:-"%h %l %u %t \"%r\" %s %b \"%{Referer}i\" \"%{User-agent}i\""}"

	local value="${VARNISH_VARNISHNCSA_FORMAT}"

	if [[ -z ${value} ]]
	then
		value="${default_value}"
	fi

	printf -- '%s' "${value}"
}

function __get_varnish_varnishncsa_options ()
{
	printf -- '%s' "${VARNISH_VARNISHNCSA_OPTIONS}"
}

function main ()
{
	local -r bin="/usr/bin/varnishncsa"
	local -r lock_file="/var/lock/subsys/varnish/varnishncsa-wrapper"
	local -r nice="/bin/nice"
	local -r niceness="10"
	local -r prerequisite_state_file="/var/lib/misc/varnishd-wrapper"
	local -r prerequisite_timeout="4"
	local -r state_file="/var/lib/misc/varnish/varnishncsa-wrapper"
	local -r timer_start="$(
		date -u +%s.%N
	)"

	local options
	local proxy
	local timer_total
	local varnish_varnishncsa_format
	local varnish_varnishncsa_options
	local verbose="false"

	if [[ ${verbose} == true ]]
	then
		printf -- \
			'INFO: %s waiting on %s\n' \
			"${0##*/}" \
			"${prerequisite_state_file##*/}"
	fi

	set +e
	until [[ -f ${prerequisite_state_file} ]]
	do
		if ! inotifywait -qq \
			-e "create" \
			-t "${prerequisite_timeout}" \
			"${prerequisite_state_file%/*}"
		then
			break
		fi
	done
	set -e

	if ! [[ -f ${prerequisite_state_file} ]]
	then
		>&2 printf -- \
			'ERROR: %s timed out waiting on %s\n' \
			"${0##*/}" \
			"${prerequisite_state_file##*/}"
		exit 1
	fi

	while [[ "${#}" -gt 0 ]]
	do
		case "${1}" in
			-v|--verbose)
				verbose="true"
				shift 1
				;;
		esac
	done

	if [[ -e ${lock_file} ]]
	then
		>&2 printf -- \
			'ERROR: %s lock detected - aborting\n' \
			"${0##*/}"
		exit 1
	fi

	trap "__cleanup" \
		INT TERM EXIT
	__create_lock

	if [[ ${verbose} == true ]] \
		&& [[ ! -e ${state_file} ]]
	then
		varnish_varnishncsa_format="$(
			__get_varnish_varnishncsa_format
		)"
		varnish_varnishncsa_options="$(
			__get_varnish_varnishncsa_options
		)"

		options="$(
			__get_options \
				"${varnish_varnishncsa_format}" \
				"${varnish_varnishncsa_options}"
		)"
		proxy="$(
			__get_proxy
		)"

		timer_total="$(
			__get_timer_total \
				"${timer_start}"
		)"

		cat \
			<<-EOT

			================================================================================
			Varnish (varnishncsa) Details
			--------------------------------------------------------------------------------
			format : ${varnish_varnishncsa_format}
			varnishncsa options : ${varnish_varnishncsa_options}
			--------------------------------------------------------------------------------
			${timer_total}

		EOT
	else
		options="$(
			__get_options
		)"
		proxy="$(
			__get_proxy
		)"
	fi

	__create_state
	__cleanup
	trap - \
		INT TERM EXIT

	if [[ ${verbose} == true ]]
	then
		printf -- \
			'INFO: %s starting %s\n' \
			"${0##*/}" \
			"${bin##*/}"
	fi

	eval "exec \
		${proxy} \
		${bin} \
		${options}"
}

main "${@}"
